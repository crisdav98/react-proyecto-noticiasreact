{"version":3,"sources":["components/Header.js","components/Noticia.js","components/ListaNoticias.js","components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Noticia","noticia","title","urlToImage","url","description","source","imagen","src","alt","name","target","rel","ListaNoticias","noticias","map","key","Formulario","state","categoria","cambiarCategoria","e","setState","value","props","consultarApi","onChange","this","Component","App","a","async","fetch","respuesta","json","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAaeA,EATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACb,yBAAKC,UAAU,mCACb,uBAAGC,KAAK,KAAKD,UAAU,qBAAqBD,KCkCjCG,EArCC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAETC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,WAAYC,EAA6BH,EAA7BG,IAAKC,EAAwBJ,EAAxBI,YAAaC,EAAWL,EAAXK,OAEvCC,EAASJ,EACb,yBAAKL,UAAU,cACb,yBAAKU,IAAKL,EAAYM,IAAKP,IAC3B,0BAAMJ,UAAU,cAAcQ,EAAOI,OAErC,KACJ,OACE,yBAAKZ,UAAU,iBACb,yBAAKA,UAAU,QACVS,EACH,yBAAKT,UAAU,gBACb,4BAAKI,GACL,2BAAIG,IAGN,yBAAKP,UAAU,eACb,uBACEC,KAAMK,EACNO,OAAO,SACPC,IAAI,sBACJd,UAAU,gCAJZ,kBCJKe,EAdO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAClB,yBAAKhB,UAAU,OACVgB,EAASC,KAAI,SAAAd,GAAO,OACjB,kBAAC,EAAD,CACIe,IAAKf,EAAQG,IACbH,QAASA,SCqCVgB,E,2MA3CbC,MAAQ,CACNC,UAAW,W,EAGbC,iBAAmB,SAAAC,GACjB,EAAKC,SACH,CACEH,UAAWE,EAAEV,OAAOY,QAEtB,WAEE,EAAKC,MAAMC,aAAa,EAAKP,MAAMC,e,wEAKvC,OACE,yBAAKrB,UAAU,gBACb,yBAAKA,UAAU,wBACb,8BACE,sDAEA,yBAAKA,UAAU,0BACb,4BAAQ4B,SAAUC,KAAKP,kBACrB,4BAAQG,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,aAAd,iBACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,iBAAd,4B,GA/BSK,aCqCVC,E,2MAlCbX,MAAQ,CACNJ,SAAU,I,EASZW,aAAe,4CAAAK,EAAAC,OAAA,uDAAOZ,EAAP,+BAAmB,UAC1Bf,EADO,yEAE8Ce,EAF9C,uDAAAW,EAAA,MAGWE,MAAM5B,IAHjB,cAGP6B,EAHO,kBAAAH,EAAA,MAIUG,EAAUC,QAJpB,OAIPpB,EAJO,OAOb,EAAKQ,SAAS,CACZR,SAAUA,EAASqB,WARR,sC,mFAJbR,KAAKF,iB,+BAiBL,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAQ5B,OAAO,uBACf,yBAAKC,UAAU,uCACb,kBAAC,EAAD,CAAY2B,aAAcE,KAAKF,eAC/B,kBAAC,EAAD,CAAeX,SAAUa,KAAKT,MAAMJ,iB,GA7B5Bc,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d6e99c16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Header = ({ titulo }) => (\r\n  <nav className=\"nav-wrapper light-blue darken-3\">\r\n    <a href=\"#!\" className=\"brand-logo center\">{titulo}</a>\r\n  </nav>\r\n);\r\n\r\nHeader.propTypes ={\r\n    titulo: PropTypes.string.isRequired\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Noticia = ({ noticia }) => {\r\n  // extraer los datos de noticia mediante destructuring\r\n  const { title, urlToImage, url, description, source } = noticia;\r\n  // cargar la imagen si es que hay sino no\r\n  const imagen = urlToImage ? (\r\n    <div className=\"card-image\">\r\n      <img src={urlToImage} alt={title} />\r\n      <span className=\"card-title\">{source.name}</span>\r\n    </div>\r\n  ) : null;\r\n  return (\r\n    <div className=\"col s12 m6 l4\">\r\n      <div className=\"card\">\r\n          {imagen}\r\n        <div className=\"card-content\">\r\n          <h3>{title}</h3>\r\n          <p>{description}</p>\r\n        </div>\r\n\r\n        <div className=\"card-action\">\r\n          <a\r\n            href={url}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"waves-effect waves-light btn\"\r\n          >\r\n            Ver Más\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nNoticia.propTypes ={\r\n    noticia: PropTypes.object.isRequired\r\n}\r\nexport default Noticia;\r\n","import React from 'react';\r\nimport Noticia from './Noticia.js';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst ListaNoticias = ({noticias}) => (\r\n    <div className=\"row\">\r\n        {noticias.map(noticia =>(\r\n            <Noticia \r\n                key={noticia.url}\r\n                noticia={noticia}\r\n            />\r\n        ))}\r\n     </div>\r\n);\r\n\r\nListaNoticias.propTypes = {\r\n    noticias: PropTypes.array.isRequired\r\n}\r\nexport default ListaNoticias;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n  state = {\r\n    categoria: \"general\"\r\n  };\r\n\r\n  cambiarCategoria = e => {\r\n    this.setState(\r\n      {\r\n        categoria: e.target.value\r\n      },\r\n      () => {\r\n        // Pasar a la pagina principal\r\n        this.props.consultarApi(this.state.categoria);\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"buscador row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <form>\r\n            <h2>Busca una categoría</h2>\r\n\r\n            <div className=\"input-field col s12 m8\">\r\n              <select onChange={this.cambiarCategoria}>\r\n                <option value=\"general\">General</option>\r\n                <option value=\"health\">Salud</option>\r\n                <option value=\"science\">Ciencia</option>\r\n                <option value=\"sports\">Deportes</option>\r\n                <option value=\"tecnology\">Tecnología</option>\r\n                <option value=\"business\">Negocios</option>\r\n                <option value=\"entertainment\">Entretenimiento</option>\r\n              </select>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormulario.propTypes={\r\n    consultarApi: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;\r\n","import React, { Component, Fragment } from \"react\";\nimport Header from \"./components/Header.js\";\nimport ListaNoticias from \"./components/ListaNoticias.js\";\nimport Formulario from \"./components/Formulario.js\";\n\nclass App extends Component {\n  state = {\n    noticias: []\n  };\n\n  // Para hacer el llamado a una API se lo hace dentro del componentDidMount que es cuando el doc esta listo\n  componentDidMount() {\n    this.consultarApi();\n  }\n\n  // Se crea una función para realizar la consulta a la API para no cargar el componentDidMount\n  consultarApi = async (categoria = \"general\") => {\n    const url = `\n    https://newsapi.org/v2/top-headlines?country=mx&category=${categoria}&apiKey=56813720afda45abb35c34c4c5c4d736`;\n    const respuesta = await fetch(url);\n    const noticias = await respuesta.json();\n\n    // Llenar el state con las noticias que llegan desde la API\n    this.setState({\n      noticias: noticias.articles\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Header titulo=\"Noticias React API\" />\n        <div className=\"container white contenedor-noticias\">\n          <Formulario consultarApi={this.consultarApi} />\n          <ListaNoticias noticias={this.state.noticias} />\n        </div>\n      </Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}